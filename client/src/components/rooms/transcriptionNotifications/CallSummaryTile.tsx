// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import { DefaultButton, Icon, IStyle, mergeStyles, Spinner, Stack, Text, useTheme } from '@fluentui/react';
import { containerStyle, containerItemGap } from '../../../styles/SummaryEndCall.styles';
import { SlideText20Regular } from '@fluentui/react-icons';
import { fetchTranscript } from '../../../utils/CallAutomationUtils';
/**
 * @private
 */
export interface CallSummaryTileProps {
  pageStyle?: IStyle;
  serverCallId?: string;
  summary?: string;
  summarizationStatus: 'InProgress' | 'Complete' | 'None';
}

/**
 * Generic page with a title and more details text for serving up a notice to the user.
 *
 * @private
 */
export const CallSummaryTile = (props: CallSummaryTileProps): JSX.Element => {
  const { serverCallId, summarizationStatus, summary, pageStyle } = props;

  const theme = useTheme();

  return (
    <Stack
      className={mergeStyles(pageStyle)}
      verticalFill
      styles={{ root: { width: '100%' } }}
      verticalAlign="center"
      horizontalAlign="center"
      aria-atomic
    >
      <Stack className={mergeStyles(containerStyle)} tokens={containerItemGap}>
        <Stack tokens={containerItemGap}>
          {summarizationStatus === 'InProgress' && (
            <Spinner styles={{ root: { marginTop: '2rem' } }} label="Summarizing conversation..." />
          )}
          {summarizationStatus === 'Complete' && summary && (
            <Stack
              styles={{
                root: {
                  width: '100%',
                  borderRadius: theme.effects.roundedCorner4,
                  boxShadow: theme.effects.elevation8
                }
              }}
            >
              <Stack styles={{ root: { padding: '1rem' } }}>
                <Text styles={{ root: { fontWeight: 600 } }} variant="large">
                  Meeting Summary
                </Text>
              </Stack>

              <Stack styles={{ root: { padding: '0 1rem' } }}>
                <Stack
                  styles={{
                    root: {
                      width: '100%',
                      height: '1px',
                      backgroundColor: theme.palette.neutralLight
                    }
                  }}
                />
              </Stack>

              <Stack tokens={{ childrenGap: '0.5rem', padding: '1rem' }}>
                <Stack horizontal tokens={{ childrenGap: '0.5rem' }} verticalAlign="center">
                  <Icon style={{ color: theme.palette.neutralSecondary }} iconName={'Info'}></Icon>
                  <Text styles={{ root: { fontWeight: 400, color: theme.palette.neutralSecondary } }}>
                    {'Generated by AI. Check for accuracy.'}
                  </Text>
                </Stack>
                <Text styles={{ root: { fontWeight: 400 } }}>{summary}</Text>
                <DefaultButton
                  text="Transcript"
                  onClick={async () => {
                    if (summary && serverCallId) {
                      const transcript = await fetchTranscript(serverCallId);
                      if (!transcript) {
                        console.error('Failed to fetch transcript');
                        return;
                      }
                      const transcriptionSentences = transcript.map(
                        (sentence) => sentence.participant.communicationUserId + ': ' + sentence.text + '\n'
                      );
                      const blob = new Blob(transcriptionSentences, { type: 'text/plain' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = 'meeting-transcript.txt';
                      document.body.appendChild(a);
                      a.click();
                      document.body.removeChild(a);
                      URL.revokeObjectURL(url);
                    }
                  }}
                  styles={{
                    root: {
                      borderRadius: theme.effects.roundedCorner4,
                      borderColor: theme.palette.neutralTertiary,
                      minWidth: '5.75rem',
                      maxWidth: '6.5rem'
                    }
                  }}
                  onRenderIcon={() => <SlideText20Regular />}
                />
                <Text styles={{ root: { fontWeight: 400, color: theme.palette.neutralSecondary } }}>
                  {'Summary and transcript are held in memory and available shortly at the end of the meeting.'}
                </Text>
              </Stack>
            </Stack>
          )}
        </Stack>
      </Stack>
    </Stack>
  );
};
