// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import { DefaultButton, Icon, IStyle, mergeStyles, Spinner, Stack, Text, useTheme } from '@fluentui/react';
import { containerStyle, containerItemGap } from '../../../styles/SummaryEndCall.styles';
import { SlideText20Regular } from '@fluentui/react-icons';
import { CallTranscription, fetchParticipants, fetchTranscript } from '../../../utils/CallAutomationUtils';
import { useEffect, useState } from 'react';
/**
 * @private
 */
export interface CallSummaryTileProps {
  pageStyle?: IStyle;
  serverCallId?: string;
  summary?: string;
  summarizationStatus: 'InProgress' | 'Complete' | 'None';
}

/**
 * Generic page with a title and more details text for serving up a notice to the user.
 *
 * @private
 */
export const CallSummaryTile = (props: CallSummaryTileProps): JSX.Element => {
  const { serverCallId, summarizationStatus, summary } = props;

  const theme = useTheme();
  const [transcript, setTranscript] = useState<CallTranscription | undefined>(undefined);
  const [showAiDisclaimer, setShowAiDisclaimer] = useState<boolean>(!!(transcript || summary));
  const [footerMessage, setFooterMessage] = useState<string | undefined>(undefined);

  useEffect(() => {
    const getTranscript = async (): Promise<void> => {
      if (serverCallId) {
        const fetchedTranscript = await fetchTranscript(serverCallId);
        if (fetchedTranscript.length === 0) {
          console.error('Failed to fetch transcript');
          return;
        }
        setTranscript(fetchedTranscript);
        setShowAiDisclaimer(true);
      }
    };
    getTranscript();
  }, []);

  useEffect(() => {
    if (transcript && summary) {
      setFooterMessage('Summary and transcript are held in memory and available shortly at the end of the meeting.');
    } else if (transcript && !summary) {
      setFooterMessage(
        'Transcripts are temporarily stored in memory and will be available shortly after the meeting ends. Please note that if you navigate away, the transcript will be lost.'
      );
    } else {
      setFooterMessage('No transcript available. No input detected or an error occurred during transcription.');
    }
  }, [transcript, summary]);

  return (
    <Stack
      style={{ width: 'auto', height: 'auto' }}
      verticalFill
      verticalAlign="center"
      horizontalAlign="center"
      aria-atomic
    >
      <Stack className={mergeStyles(containerStyle)} tokens={containerItemGap}>
        <Stack tokens={containerItemGap}>
          {summarizationStatus === 'InProgress' && (
            <Spinner styles={{ root: { marginTop: '2rem' } }} label="Summarizing conversation..." />
          )}
          {summarizationStatus !== 'InProgress' && (
            <Stack
              styles={{
                root: {
                  width: '100%',
                  borderRadius: theme.effects.roundedCorner4,
                  boxShadow: theme.effects.elevation8
                }
              }}
            >
              <Stack styles={{ root: { padding: '1rem' } }}>
                <Text styles={{ root: { fontWeight: 600 } }} variant="large">
                  {summary ? 'Meeting Summary' : 'Meeting Transcript'}
                </Text>
              </Stack>

              <Stack styles={{ root: { padding: '0 1rem' } }}>
                <Stack
                  styles={{
                    root: {
                      width: '100%',
                      height: '1px',
                      backgroundColor: theme.palette.neutralLight
                    }
                  }}
                />
              </Stack>

              <Stack tokens={{ childrenGap: '0.5rem', padding: '1rem' }}>
                {showAiDisclaimer && (
                  <Stack horizontal tokens={{ childrenGap: '0.5rem' }} verticalAlign="center">
                    <Icon style={{ color: theme.palette.neutralSecondary }} iconName={'Info'}></Icon>
                    <Text styles={{ root: { fontWeight: 400, color: theme.palette.neutralSecondary } }}>
                      {'Generated by AI. Check for accuracy.'}
                    </Text>
                  </Stack>
                )}
                {summary && <Text styles={{ root: { fontWeight: 400 } }}>{summary}</Text>}
                {transcript && (
                  <DefaultButton
                    text="Transcript"
                    onClick={async () => {
                      if (serverCallId) {
                        const participants = await fetchParticipants(serverCallId);
                        const transcriptionSentences = transcript.map((sentence) => {
                          const displayName = participants.find(
                            (p) => p.userId === sentence.participant.communicationUserId
                          )?.displayName;
                          return displayName
                            ? displayName + ': ' + sentence.text + '\n'
                            : sentence.participant.communicationUserId + ': ' + sentence.text + '\n';
                        });
                        const blob = new Blob(transcriptionSentences, { type: 'text/plain' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = 'meeting-transcript.txt';
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                      }
                    }}
                    styles={{
                      root: {
                        borderRadius: theme.effects.roundedCorner4,
                        borderColor: theme.palette.neutralTertiary,
                        minWidth: '5.75rem',
                        maxWidth: '6.5rem'
                      }
                    }}
                    onRenderIcon={() => <SlideText20Regular />}
                  />
                )}
                <Text styles={{ root: { fontWeight: 400, color: theme.palette.neutralSecondary } }}>
                  {footerMessage}
                </Text>
              </Stack>
            </Stack>
          )}
        </Stack>
      </Stack>
    </Stack>
  );
};
